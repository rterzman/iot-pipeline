version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    container_name: "iot-zookeeper"
    networks:
      - "default"
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: "iot-kafka"
    networks:
      - "default"
    ports:
      - "29092:29092"
    volumes:
      - ./mp-kafka-data:/confluentinc-kafka
    environment:
      KAFKA_LISTENERS: EXTERNAL://:29092,INTERNAL://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    depends_on:
      - zookeeper

  timescaledb:
    image: timescale/timescaledb:latest-pg13
    container_name: iot-timescaledb
    networks:
      - "default"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - TS_TUNE_MEMORY=4GB
      - TS_TUNE_NUM_CPUS=2
    volumes:
      - ./timeseriesdb_init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./postgres-data:/var/lib/postgresql/data
  kafka-ui:
    container_name: "kafka-ui"
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    networks:
      - "default"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - zookeeper
      - kafka
  sensor-query:
    container_name: "sensor-query"
    build: ../sensor-query-service/.
    networks:
      - "default"
    ports:
      - "8084:8084"
    environment:
      SPRING_APPLICATION_JSON: '{
              "spring.r2dbc.url": "r2dbc:postgresql://:@timescaledb:5432/iot",
              "logging.level.ROOT": "INFO"
            }'
    depends_on:
      - timescaledb
  sensor-command:
      container_name: "sensor-command"
      build: ../sensor-command-service/.
      networks:
        - "default"
      ports:
        - "8083:8083"
      environment:
        SPRING_APPLICATION_JSON: '{
                    "spring.r2dbc.url": "r2dbc:postgresql://:@timescaledb:5432/iot",
                    "logging.level.ROOT": "INFO",
                    "spring.kafka.bootstrap-servers": "kafka:9092"
                  }'
      depends_on:
        - timescaledb
        - kafka

  sensor-api-gateway:
      container_name: "sensor-api-gateway"
      build: ../api-gateway-service/.
      networks:
        - "default"
      ports:
        - "8082:8082"
      environment:
        SPRING_APPLICATION_JSON: '{
            "logging.level.ROOT": "DEBUG",
            "spring.kafka.bootstrap-servers": "kafka:9092"
          }'
      depends_on:
        - kafka

volumes:
  postgres-data:
    driver: local
  mp-kafka-data:
    driver: local
networks:
  default:
    ipam:
      config:
        - subnet: 10.100.0.0/24
